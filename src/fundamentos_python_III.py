# ------------------------------
# ‚ú® Ejercicio 1: Saludo b√°sico
# Objetivo: Aprender a definir y llamar funciones
# Crea una funci√≥n llamada saludar() que imprima: "¬°Hola, bienvenido/a!"
# Luego llama a la funci√≥n una vez para comprobar que funciona.

def saludar():
    print("¬°Hola, bienvenido/a!")

saludar()

# ------------------------------
# ‚ú® Ejercicio 2: Saludo personalizado
# Objetivo: Trabajar con par√°metros
# Crea una funci√≥n llamada saludar_persona(nombre) que imprima: "Hola, [nombre]!"
# Llama a la funci√≥n dos veces con diferentes nombres.

def saludo_personal(nombre):
    print (f" Hola, {nombre}")

saludo_personal("Emma")

# ------------------------------
# ‚ú® Ejercicio 3: Suma f√°cil
# Objetivo: Usar par√°metros y return
# Crea una funci√≥n llamada sumar(a, b) que devuelva la suma de dos n√∫meros.
# Guarda el resultado en una variable y mu√©stralo con print().

def suma_facil(a, b):
    resultado= a+b
    return resultado 
print("La suma es: ", suma_facil(5, 10)) 

# ------------------------------
# ‚ú® Ejercicio 4: ¬øPar o impar?
# Objetivo: Usar l√≥gica dentro de una funci√≥n
# Escribe una funci√≥n es_par(numero) que devuelva True si el n√∫mero es par y False si es impar.
# Pru√©bala con varios n√∫meros y muestra el resultado.

def es_par(numero):
    if numero % 2 == 0:
        return True
    else:
        return False    
    
print("El n√∫mero 4 es par: ", es_par(4))
print("El n√∫mero 5 es par: ", es_par(5))


# ------------------------------
# ‚ú® Ejercicio 5: Mensaje con formato
# Objetivo: Devolver una cadena con formato
# Crea una funci√≥n llamada mensaje(nombre, edad) que devuelva una frase como:
# "Me llamo Marta y tengo 30 a√±os."
# Usa return y luego muestra el mensaje con print().

def mensaje(nombre, edad):
    return f"Me llamo {nombre} y tengo {edad} a√±os."
print(mensaje("Marta", 30))



# ------------------------------
# ‚ú® Ejercicio 6: Calculadora simple
# Objetivo: Practicar varias funciones juntas
# Crea 4 funciones: sumar(a, b), restar(a, b), multiplicar(a, b), dividir(a, b)
# Llama a cada una con un par de n√∫meros y muestra los resultados.
# Bonus: en dividir(), si el segundo n√∫mero es 0, devuelve "No se puede dividir por cero"

def sumar(a, b):
    return a + b
def restar(a, b):
    return a - b    
def multiplicar(a, b):
    return a * b
def dividir(a, b):
    try:
        return a / b
    except ZeroDivisionError:
        return "No se puede dividir por cero" 
    
print("Suma: ", sumar(10, 5))
print("Resta: ", restar(10, 5))


# ------------------------------
# ‚ú® Ejercicio 7: Edad en el futuro
# Objetivo: Usar return con operaciones
# Escribe una funci√≥n llamada edad_futura(edad_actual, a√±os) que calcule la edad que tendr√°s despu√©s de X a√±os.

def edad_futura(edad_actual, anos):
    return edad_actual + anos
print("Tu edad en 10 a√±os ser√°: ", edad_futura(30, 10))

# ------------------------------
# ‚ú® Ejercicio 8: Media de 3 n√∫meros
# Objetivo: Trabajar con n√∫meros y return
# Crea una funci√≥n llamada calcular_media(a, b, c) que devuelva la media de tres n√∫meros.
# Prueba la funci√≥n y muestra el resultado con print().

def calcular_media(a, b, c):
    return (a + b + c) / 3
print("La media de 3 n√∫meros es: ", calcular_media(10, 20, 30))


# ------------------------------
# ‚ú® Ejercicio 9: Mostrar men√∫ (sin l√≥gica)
# Objetivo: Separar la presentaci√≥n de la l√≥gica
# Escribe una funci√≥n llamada mostrar_menu() que imprima un peque√±o men√∫ como:
# 1. Ver perfil
# 2. Editar perfil
# 3. Cerrar sesi√≥n

def mostrar_menu():
    opciones = ["Ver perfil", "Editar perfil", "Cerrar sesion"]
    for i, opcion in enumerate(opciones, start=1):
        print(f"{i}. {opcion}")

# ------------------------------
# üåü Reto Final: Generador de contrase√±as

# Crea una funci√≥n llamada generar_contrase√±a(longitud)
# que devuelva una contrase√±a aleatoria con la longitud especificada.

# La contrase√±a debe contener una mezcla de:
# - letras min√∫sculas (a-z)
# - letras may√∫sculas (A-Z)
# - n√∫meros (0-9)
# - s√≠mbolos como !, @, #, $, %, &, *

# Ejemplo de uso:
# contrase√±a = generar_contrase√±a(12)
# print(contrase√±a)  # -> A2c$e9#Tq&7L

# Bonus:
# - Usa la librer√≠a random
# - Controla que la longitud m√≠nima sea 8 caracteres
# - A√±ade un mensaje de advertencia si se pide menos de 8

def generar_contrase√±a(longitud):
    import random
    import string

    if longitud < 8:
        return "La longitud m√≠nima es de 8 caracteres."

    caracteres = string.ascii_letters + string.digits + "!@#$%^&*()" # Mezcla de letras, n√∫meros y s√≠mbolos
    contrase√±a = ''.join(random.choice(caracteres) for _ in range(longitud)) # Genera la contrase√±a aleatoria
    return contrase√±a